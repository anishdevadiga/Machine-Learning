# -*- coding: utf-8 -*-
"""crossvalidation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L0dM-PfscUt6R6HGj58yItvwhDlCo4-8
"""

import pandas as pd # type: ignore
from sklearn.datasets import load_iris # type: ignore
iris=load_iris()
table=pd.DataFrame(iris.data,columns=iris.feature_names)

table.head()

table['target']=iris.target
table.head()

table.describe()

#holdout cv method
x=table.drop(['target'],axis="columns") #here target is the dependent varaible so drop the table
y=iris.target #dependent variable
x.head()

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,y_test = train_test_split(x,y,test_size=0.20,random_state=0)

#The classifier is used in machine learning as a
# way to categorize or predict the class of a given data point or sample.
#In the code you provided, a Gaussian Naive Bayes classifier is used.
 #This is a specific type of classifier that applies the Bayes’ theorem with the “naive” assumption of conditional independence
 #between every pair of features.'''

from sklearn.naive_bayes import GaussianNB
classifier1=GaussianNB()
classifier1.fit(X_train,Y_train)

classifier1.score(X_test,y_test)

classifier1.score(X_train,Y_train)

#k fold
from sklearn.model_selection import cross_val_score,KFold
kf=KFold(n_splits=5)
kf

for train,test in kf.split(x,y):
  print("Train->",train,'\n','Test->',test,'\n')

score=cross_val_score(classifier1,x,y,cv=kf)
score

score.mean()

#Strafied K fold
from sklearn.model_selection import StratifiedKFold
skf=StratifiedKFold(n_splits=5)
skf

for train,test in skf.split(x,y):
  print("Train->",train,'\n','Test->',test,'\n')

classifier2=GaussianNB()
#The line classifier2 = GaussianNB() is creating a new instance of the Gaussian
# Naive Bayes classifier from the Scikit-Learn library in Python.

score=cross_val_score(classifier2,x,y,cv=skf)
score

score.mean()

#Leave Pout
from sklearn.model_selection import LeavePOut
lp=LeavePOut(p=2)
lp
lp.get_n_splits(x)

for train,test in lp.split(x,y):
  print("Train->",train,'\n',"Test->",test,'\n')

from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import cross_val_score
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import LeavePOut
iris=load_iris()

table = pd.DataFrame(iris.data,columns=iris.feature_names)
table['target']=iris.target
x = table.drop(['target'], axis='columns')
y = iris.target
classifier3 = GaussianNB()
classifier3.fit(x,y)
lp=LeavePOut(p=2)
lp
lp.get_n_splits(x)
for train,test in lp.split(x,y):
  print("Train->",train,'\n',"Test->",test,'\n')

score=cross_val_score(classifier3,x,y,cv=lp)
score
score.mean()

from sklearn.model_selection import LeaveOneOut
loo=LeaveOneOut()
loo
for train, test in loo.split(x, y):
    print("TRAIN-->", train,'\n', "TEST-->", test,'\n')

classifier4=GaussianNB()
score=cross_val_score(classifier4,x,y,cv=loo)
score

score.mean()